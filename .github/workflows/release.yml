name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    # only run on pushes to main that aren't from GitHub Actions bot, or on manual trigger
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && github.actor != 'github-actions[bot]') || github.event_name == 'workflow_dispatch'
    outputs:
      bump_type: ${{ steps.bump-type.outputs.bump }}
      new_version: ${{ steps.version-bump.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci
        
      - name: Check for changes in 'src/'
        id: check-src-changes
        if: github.event_name != 'workflow_dispatch'
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q "^src/"; then
            echo "src_changed=true" >> $GITHUB_OUTPUT
          else
            echo "src_changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Check PR title for fix prefix
        id: check-fix-prefix
        if: github.event_name != 'workflow_dispatch'
        run: |
          PR_TITLE=$(git log -1 --pretty=format:%s)
          if [[ "$PR_TITLE" == fix:* ]]; then
            echo "is_fix=true" >> $GITHUB_OUTPUT
          else
            echo "is_fix=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        id: bump-type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.version_increment }}" == "auto" ]]; then
              # Still try to auto-detect even in manual mode
              if git diff --name-only HEAD^ HEAD | grep -q "^src/"; then
                echo "bump=minor" >> $GITHUB_OUTPUT
              else
                echo "bump=patch" >> $GITHUB_OUTPUT
              fi
            else
              echo "bump=${{ github.event.inputs.version_increment }}" >> $GITHUB_OUTPUT
            fi
          else
            # Original auto-detection logic for push events
            if [[ "${{ steps.check-src-changes.outputs.src_changed }}" == "true" ]]; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif [[ "${{ steps.check-fix-prefix.outputs.is_fix }}" == "true" ]]; then
              echo "bump=patch" >> $GITHUB_OUTPUT
            else
              echo "bump=none" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Bump version
        if: steps.bump-type.outputs.bump != 'none'
        id: version-bump
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          if [[ "${{ steps.bump-type.outputs.bump }}" == "major" ]]; then
            # Bump major version, reset minor and patch
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "${{ steps.bump-type.outputs.bump }}" == "minor" ]]; then
            # Bump minor version, reset patch
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
          else
            # Bump patch version
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Build VSIX package
        if: steps.bump-type.outputs.bump != 'none'
        run: |
          npm install -g @vscode/vsce
          vsce package
          
      - name: Create Release
        if: steps.bump-type.outputs.bump != 'none'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version-bump.outputs.new_version }}
          name: Release v${{ steps.version-bump.outputs.new_version }}
          body: ${{ github.event.inputs.release_notes || format('Automatic release for version {0}', steps.version-bump.outputs.new_version) }}
          draft: false
          prerelease: false
          files: |
            *.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Save release info
        if: steps.bump-type.outputs.bump != 'none'
        run: |
          mkdir -p release-info
          echo "${{ steps.bump-type.outputs.bump }}" > release-info/bump_type.txt
          echo "${{ steps.version-bump.outputs.new_version }}" > release-info/new_version.txt
      
      - name: Upload release info
        if: steps.bump-type.outputs.bump != 'none'
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release-info/
          retention-days: 1
          
      - name: Commit version bump
        if: steps.bump-type.outputs.bump != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ steps.version-bump.outputs.new_version }}"
          git push
